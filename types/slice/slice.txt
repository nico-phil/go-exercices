In Go, a slice is a more flexible and powerful data type than an array, but it is built 
on top of an array. The slice itself is a small struct that stores three key components:

1. Pointer: This points to the underlying array where the elements of the slice are stored in memory.

2. Length:  This represents the number of elements currently in the slice.

3. Capacity:   This represents the maximum number of elements the slice can hold without 
            reallocating memory. Itâ€™s the length of the underlying array starting from the 
            slice's first element to the end of the array.

            struct {
                ptr      *elementType // pointer to the underlying array
                len      int          // number of elements in the slice
                cap      int          // capacity of the slice
            }




Memory Layout:
    When you create a slice, Go allocates a backing array to hold the elements. 
    The slice itself holds a pointer to this backing array and manages the length and capacity. 
    Modifying the elements within the slice directly affects the underlying array

    a := []int{1, 2, 3, 4, 5}

    Here, the slice a has:

    A pointer pointing to the first element of the underlying array ([1, 2, 3, 4, 5]).
    len = 5
    cap = 5 (because it can use the entire array)


If the slice needs more capacity (e.g., when appending more elements beyond 
its current capacity), Go will allocate a new, larger array, copy the existing 
elements over, and adjust the slice's internal pointer and capacity accordingly.


Since slices only hold a pointer to the underlying array, passing a slice to a 
function doesn't copy the actual data; it only passes the pointer, making them very 
efficient for memory usage.
