in Go, strings are stored as two part structure in memory

    1. pointer to the actual string data(which resides in a separate block of memory).
    2. Length of the string, representing the number of bytes in the string (not necessarily the number of characters).


This structure allows strings in Go to be efficiently passed around by reference 
(since only the pointer and length are passed, not the entire data). However, strings 
in Go are immutable, meaning once a string is created, it cannot be modified.

type string struct {
    Data *byte  // pointer to the actual data
    Len  int    // length of the string in bytes
}

1. Pointer to the Actual Data
    The first part of the string is a pointer to the underlying array of bytes that stores the actual string data (UTF-8 encoded).
    The actual string data is allocated elsewhere in memory, typically on the heap, so the pointer points to this location.
    This enables Go to work with large strings without copying the entire string each time it's passed to a function.

2. Length
    The second part of the string structure is the length, which is an int representing 
    the number of bytes in the string.Since Go strings are UTF-8 encoded, a single character 
    (rune) can take up multiple bytes. Therefore, the length may not represent the number 
    of characters, but rather the number of bytes used to encode the string.



string a immutable, what it means in go?

In Go, when we say strings are immutable, it means that once a string is created, 
its underlying data cannot be changed. You cannot modify individual characters or 
alter the contents of a string directly. Any operation that seems to "modify" a string 
actually creates a new string rather than changing the existing one.

Here’s what immutability of strings in Go means in practice:

    1. No Direct Modification:
        You cannot change the contents of a string once it's created. For example:
        s := "hello"
        // s[0] = 'H'  // This would produce a compile-time error


    2. New String Creation:
        If you want to "modify" a string (e.g., change a character), you have to create a new string:
        s := "hello"
        s = "H" + s[1:] // Create a new string by modifying the first character
        fmt.Println(s)  // Output: Hello

        Here, a new string "Hello" is created, but the original string "hello" remains unchanged.



    3. Efficient Sharing:
    Since strings cannot be modified, Go can safely share the same string data across different variables without needing to copy it. 
    This means that multiple variables can point to the same underlying string data in memory, 
    making string operations more memory efficient. However, if you perform an operation 
    that results in a string "modification" (e.g., concatenation), a new string is allocated.

    Why Is This Important?
    Safety: You don't have to worry about a string being accidentally changed elsewhere in the code when passing 
    it between functions or goroutines.
    Concurrency: Since strings can't be modified, they are naturally thread-safe when shared between goroutines.
    Optimization: Go can optimize string handling since it knows that strings won’t change once created.