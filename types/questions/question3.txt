Slices:

Q:  Explain the internal structure of a slice in Go. What fields make up a slice's header, 
    and how do they interact with memory allocation?

Ans: A slice in Go is a descriptor or struct that contains three fields:

    A pointer to the underlying array (ptr *): This points to the first element in the 
    underlying array where the data is stored.

    A length (len int): This specifies the number of elements that the slice is currently 
    using from the array.

    A capacity (cap int): This indicates the total number of elements the underlying 
    array can hold without reallocation.

    The slice does not own the array it points to, which allows multiple slices to share 
    the same underlying array. The array itself is created when the slice is initialized 
    or grown using append.

    struct {
        ptr *
        len int
        cap int
    }


Q:  How does Go manage slice capacity and reallocation when appending elements? 
    What happens in memory when a slice's capacity is exceeded?

Ans:    When appending elements to a slice, if the current capacity is exceeded, Go allocates 
        a new array with a larger capacity. It copies the existing elements from the old array to 
        the new array and updates the slice to point to the new array. Typically, the new capacity 
        is doubled to minimize future reallocations and make the process efficient.

        This reallocation only occurs when the current capacity is exceeded. Otherwise, 
        Go just appends the new elements to the existing array.
        
        Memory impact: Each time a reallocation occurs, Go must copy the elements to the 
        new array, which can introduce overhead. However, the doubling of capacity reduces 
        the frequency of reallocations.



Q:  Can two slices point to the same underlying array? If so, what are the implications 
    for memory management and concurrency?

Ans:  Yes, two slices can point to the same underlying array. This happens when:

    You create one slice from another (e.g., s2 := s1[1:3]).

    You pass a slice to a function (as slices are passed by reference, not by copying 
    the underlying data).


    Implications:

        Memory Efficiency: Since multiple slices can share the same underlying array, 
            modifications made through one slice affect the data seen by others. This is efficient 
            in terms of memory because no data is copied, but you need to be careful when modifying 
            shared slices.

        Concurrency: Slices are not thread-safe. If two goroutines attempt to modify the 
            same underlying array through different slices, data races can occur. To avoid this, 
            synchronization mechanisms like sync.Mutex must be used to lock the shared resource 
            during concurrent access.

        Memory Management: One subtle issue arises if a small slice references a large array. 
            Even though only a portion of the array is being used, the entire array remains i
            n memory until all slices that reference it are garbage collected.



