Pointer types

Question: How are pointers stored in Go, and what happens when you dereference a pointer?

Answer: a pointer stores the memory address of a value, when you create pointer, go allocate
        memory for the pointer variable it self and hold the memory address of a value

        when you deferencing a pointer, go follows the memory address where the value is stored,
        and then retrive the value at that address



Question:   What are the differences between pointers and slices in terms of memory and how 
            they reference underlying data?


Answer: pointers store address of value, slices are implement as a struct with 3 field:
        a length, a capacity and a pointer to an array to hold the value of the slice



Question:   Explain how Go prevents dangling pointers or pointer arithmetic issues that exist 
            in languages like C.

Answer: Go prevents issues like dangling pointers and pointer arithmetic 
        (common in languages like C) through:

    Garbage Collection: Go has an automatic garbage collector that reclaims memory that 
    is no longer reachable or in use. This prevents the issue of dangling pointersâ€”where 
    a pointer points to memory that has been freed.

    No Pointer Arithmetic: Unlike C, Go does not allow arbitrary pointer arithmetic. 
    This means you cannot manually manipulate pointers to move around memory blocks, which 
    helps avoid common memory corruption errors.

    Safe Pointers: In Go, when a pointer variable is declared but not assigned, it defaults 
    to a nil value. Accessing a nil pointer triggers a runtime panic, making errors easier 
    to detect early on.


