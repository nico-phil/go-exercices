In Go, maps are implemented as hash tables that use a hashing function to compute 
the index of the underlying data structure where key-value pairs are stored. 
Maps are highly optimized for fast lookups, insertions, and deletions, making them 
efficient for managing key-value associations.

Memory Structure of Maps in Go:

    1. Buckets:
        A Go map consists of multiple buckets that hold key-value pairs. 
        When a key is inserted, Go uses a hashing function to compute which bucket 
        the key-value pair should go into. Each bucket can hold multiple key-value pairs 
        to handle collisions, i.e., situations where different keys produce the same hash value.
        If too many key-value pairs are stored in a single bucket (due to collisions), 
        Go dynamically allocates more buckets and rehashes the data.

    2. Hash Function:
        When a key is added to the map, Go computes the hash of the key to determine the bucket 
        where the key-value pair will be stored. This hash function provides a way to distribute 
        keys uniformly across buckets. The hash function is based on the key type, and the 
        bucket is determined using the lower bits of the hash.


    3. Overflow Buckets:
        If a bucket becomes too full (i.e., exceeds a certain load factor), the map will 
        allocate overflow buckets. These overflow buckets allow the map to continue storing 
        new key-value pairs without resizing the entire map immediately.
        As the map grows in size (due to more key-value pairs being inserted), Go dynamically 
        resizes the map to reduce the need for overflow buckets.


    4. Load Factor and Resizing:
        Maps in Go are designed to maintain efficient performance by keeping the number 
        of elements per bucket relatively small. 
        When the number of key-value pairs increases and exceeds the optimal load factor, 
        Go triggers a rehashing process. This involves doubling the number of buckets and 
        redistributing the existing key-value pairs across the new buckets.
        
    
    5. Pointers and Indirection:
        A Go map contains pointers to buckets, and each bucket can store multiple 
        key-value pairs. These key-value pairs are stored as arrays or lists inside 
        the bucket structure. When you retrieve a value from a map, Go uses the hash of 
        the key to determine which bucket the value resides in and then checks that bucket 
        for the exact key.


Memory Layout
    Here's an overview of how Go maps are stored in memory:

        Map header: The map itself is a reference type and contains metadata such as the number of 
        key-value pairs, number of buckets, and pointers to the buckets array.

        Buckets array: This array holds pointers to individual buckets, and each bucket contains 
        arrays of keys and values. Each bucket also contains pointers to overflow buckets if needed.

        Overflow handling: When buckets overflow, the map uses linked lists of overflow buckets. 
        Over time, if the map grows, it will resize and rehash the keys to distribute them across 
        a larger number of buckets.

example:

    m := make(map[string]string)
    Internally a structure called map header is created and the variable m 
    receives a pointer to this structure, the map header contains all the meta 
    information about the map, like: 
        
        - The number of entries that are currently in the map
        - The number of buckets in a map is always equal to power of two hence the log(buckets) stored to keep the value small
        - Pointer to the bucket array that is stored in contiguous memory location,
        - Hash seed which is random to create each map differently



What happens when we insert a new value in the map

    m[“green”] = “#00ff00” 

    Hash function is called and a hash code is generated for the given key, based on a part 
    of the hash code a bucket is determined to store the key value pair. Once the bucket 
    is selected the entry needs to be stored in that bucket. The complete hash code of the 
    incoming key is compared with all the hashes from the initial array of hash codes i.e 
    h1, h2, h3…. if no hash code matches that means this is a new entry. Now if the bucket 
    contains an empty slot then the new entry is stored at the end of the list of key value 
    pairs, else a new bucket is created and the entry is stored in the new bucket and the 
    overflow pointer of old bucket points to this new bucket.


Map Iteration
    Map iterator in golang is random. If you print the same map multiple times you can 
    see that each output will be different.


What happens when map grows
    Every time the number of elements in a bucket reaches a certain limit, i.e the load 
    factor which is 6.5, the map will grow in size by doubling the number of buckets. 
    This is done by creating a new bucket array consisting of twice the number of buckets 
    than the old array, and then copying all the buckets from old to new array but this is 
    done very efficiently over time and not at once. During this the map maintains a pointer 
    to the old bucket which is stored at the end of the new bucket array.



What happens when we delete an entry from the map
     golang only grow in size. Even if we delete all the entries from the map, 
     the number of buckets will remain the same




Go Map Key Characteristics:
    Keys and Values: Stored together in the buckets. Go supports a variety of key types, 
    such as strings, integers, and structs (as long as they are comparable).

    Pointer-based: Since Go maps are pointer-based, when you pass a map to a function, 
    only a reference to the map is passed, not a copy.

    Non-deterministic order: Map iteration order in Go is randomized for security reasons, 
    so maps do not guarantee a consistent order of elements.



Key Features of Go Maps:
    Fast lookups and insertions due to efficient hashing.

    Automatic resizing ensures performance does not degrade as the map grows.

    Garbage Collection: Maps are garbage collected. If a map is no longer referenced, 
    Go's garbage collector will free the memory.


Performance Considerations:
    Memory usage: Go maps may use more memory than other data structures due to the 
    overhead from buckets and overflow management.

    Speed: Maps provide average O(1) time complexity for lookups, insertions, 
    and deletions, but performance can degrade if there are too many hash collisions 
    or if the map isn't properly sized.


you cannot use the copy function to copy a map in Go. The copy function is designed 
specifically for slices, not maps.