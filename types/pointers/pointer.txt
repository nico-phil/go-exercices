Pointers

In Go, pointers are a type that store the memory address of a value rather than the value itself. 
Here's how pointers are stored in memory:


1. Pointer Structure:
    A pointer is simply a memory address. When you create a pointer to a value, 
    Go allocates memory for the value itself, and then the pointer holds the address where 
    that value is stored.

    var x int = 42
    var p *int = &x

    In this example:
        x is an integer stored in memory, say at memory address 0x100.

        p is a pointer that holds the memory address of x, which in this case is 0x100.


2. Memory Representation:
    The pointer p occupies a fixed amount of space in memory (the size of the memory address 
    on the machine architecture). On a 32-bit system, a pointer is 4 bytes (32 bits), and on 
    a 64-bit system, a pointer is 8 bytes (64 bits). It holds the address where the value 
    resides.

    For example:
    On a 64-bit system, the pointer p would take 8 bytes of memory and store the value 
    0x100 (or whatever address corresponds to x).

    It does not hold the value 42 itself, but simply the location where 42 is stored.


3. Dereferencing a Pointer:
    When you dereference a pointer, i.e., *p, Go follows the memory address stored in the 
    pointer to retrieve the actual value stored at that location. In the case of the example:

    fmt.Println(*p)  // Output: 42

    Dereferencing p retrieves the value 42 stored at the memory address 0x100.


4. Nil Pointers:
    If a pointer is not assigned to any memory address, it is set to nil, which is the zero 
    value for pointers. A nil pointer indicates that the pointer doesn't point to any memory 
    location

    var p *int  // This is a nil pointer
    fmt.Println(p)  // Output: <nil>

    In memory, a nil pointer is simply represented as 0x0 (or another equivalent null 
    value depending on the system).


5. Pointer Safety in Go:
    Go provides automatic memory management (garbage collection), so it ensures that pointers 
    point to valid memory. Dangling pointers (pointers that point to freed memory) are largely 
    avoided because Go's garbage collector automatically frees memory that is no longer reachable.


Summary:
    A pointer in Go is stored as a memory address pointing to another value.

    The size of a pointer depends on the system's architecture (32-bit vs. 64-bit).

    Pointers themselves occupy memory for storing the address, but they don't directly hold 
    the value they point to.

    Dereferencing a pointer allows Go to access the value stored at the memory address 
    the pointer holds.